/*
* @Author: huazite
* @Date: 2019-07-09 22:39:07
 * @Last Modified by: zu1662
 * @Last Modified time: 2019-07-24 22:23:45
* @Description:  自动生成src的包入口文件
*/

const path = require('path')
const fs = require('fs')
// 驼峰式转换
const uppercamelcase = require('uppercamelcase')
// json模板
var render = require('json-templater/string')
// 定义操作系统的行结尾，如：\r\n 在 Windows系统上；\n 在 POSIX 系统上
const endOfLine = require('os').EOL

// 输出路径
const OUTPUT_PATH = path.resolve(__dirname, '../../src/index.js')
// 组件导入的字符串模板
const IMPORT_TEMPLATE = `import {{name}} from './packages/{{package}}/index.js';`
const COMPONENT_TEMPLATE = '  {{name}}'
const MAIN_TEMPLATE = `
/* Automatically generated by './webpack/watcher.js' */

{{include}}

const components = [
{{install}},
];

const install = function(Vue, opts = {}) {
  components.forEach(component => {
    Vue.component(component.name, component);
  });

  // Vue.use(InfiniteScroll);

  Vue.prototype.$zui = {
    size: opts.size || '',
    zIndex: opts.zIndex || 2000
  };

  // Vue.prototype.$loading = Loading.service;

};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
}

export default {
  version: '{{version}}',
  install,
{{list}}
};
`

// 文件生成函数
function updateSrcEntry () {
  const includeComponentTemplate = []
  const installTemplate = []
  const listTemplate = []
  // 获取目录下的所有组件文件夹名称
  var dirs = fs.readdirSync(path.resolve(__dirname, '../../src/packages'))

  dirs.forEach(name => {
    var componentName = uppercamelcase(name)

    includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
      name: componentName,
      package: name
    }))

    installTemplate.push(render(COMPONENT_TEMPLATE, {
      name: componentName
    }))

    listTemplate.push(`  ${componentName}`)
  })
  var template = render(MAIN_TEMPLATE, {
    include: includeComponentTemplate.join(endOfLine),
    install: installTemplate.join(',' + endOfLine),
    version: process.env.VERSION || require('../../package.json').version,
    list: listTemplate.join(',' + endOfLine)
  })

  fs.writeFileSync(OUTPUT_PATH, template)
}

module.exports = {
  updateSrcEntry
}
